#
# Scan the xNVMe code-base using Coverity and upload them for analysis
#
# It uses a Debian Buster container, in order to:
#
# - Use scripts/pkgs/buster.sh script to install build requirements
# - Debian Bullseye is not used since the Coverity compiler-configuration failed
#   to emit compilation objects for analysis, e.g. gcc 10 seems to be too new
#
name: coverity

on:
  push:
    branches:
      - master
      - dev
      - coverity
    tags:
      - v*

defaults:
  run:
    shell: bash

jobs:
  #
  # Produce a "full" source-archive, that is, including third-party source via meson subprojects
  #
  # This is done to provide the source-archive for users in environments without network access
  # and for the containers in the workflow to fetch the entire source archive once
  #
  source-archive-gen:
    runs-on: ubuntu-latest

    steps:
    - name: Grab source
      uses: actions/checkout@v2

    - name: Prepare Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Generate Full Source Archive
      run: |
        source scripts/pkgs/ubuntu-focal.sh
        pip3 install meson
        make config
        make gen-src-archive

    - name: Upload source archive
      uses: actions/upload-artifact@v2
      with:
        name: archive-src
        path: builddir/*.zip

  linux-build-coverity:
    runs-on: ubuntu-latest
    needs: source-archive-gen

    container: debian:buster
    env:
      COVERITY_TGZ_PATH: "/tmp/cov-analysis-linux64.tar.gz"
      COVERITY_ROOT: "/tmp/cov-analysis-linux64"
      PROJECT_NAME: "xNVMe"

    steps:

    - name: xNVMe, download the full-source-archive
      uses: actions/download-artifact@v2
      with:
        name: archive-src

    - name: xNVMe, extract the full-source-archive
      run: |
        unzip xnvme*.zip
        rm xnvme*.zip

    - name: xNVMe, install build-requirements
      run: |
        source scripts/pkgs/debian-buster.sh

    - name: xNVMe, configure the build
      run: |
        make config

    - name: xNVMe, dump the compile-commands and machine
      run: |
        cat /proc/cpuinfo || true
        cat build/compile_commands.json || true

    - name: Project, define version env. var.
      run: |
        PROJECT_VERSION=$(python3 scripts/xnvme_ver.py --cml CMakeLists.txt)
        echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV

    - name: Coverity, install requirements
      run: |
        apt-get install -qy wget curl

    - name: Coverity, download
      run: |
        wget -q https://scan.coverity.com/download/cxx/linux64 \
         --post-data "token=${{ secrets.COVERITY_SCAN_TOKEN }}&project=${PROJECT_NAME}" \
         -O ${COVERITY_TGZ_PATH}

    - name: Coverity, unpack
      run: |
        mkdir -p "${COVERITY_ROOT}"
        tar xzf "${COVERITY_TGZ_PATH}" --strip 1 -C "${COVERITY_ROOT}"

    - name: Coverity, configure compiler/gcc
      run: |
        export PATH="${COVERITY_ROOT}/bin:$PATH"
        cov-configure --gcc

    - name: Coverity, build xNVMe
      run: |
        export PATH="${COVERITY_ROOT}/bin:$PATH"
        make clean config
        cov-build --dir cov-int make

    - name: Coverity, submit results for analysis
      run: |
        tar czvf "${PROJECT_NAME}_cov.tgz" cov-int
        curl --form token=${{ secrets.COVERITY_SCAN_TOKEN }} \
        --form email=${{ secrets.COVERITY_SCAN_EMAIL }} \
        --form file=@${PROJECT_NAME}_cov.tgz \
        --form version="v${PROJECT_VERSION}" \
        --form description="xNVMe libraries and tools for NVMe" \
        "https://scan.coverity.com/builds?project=${PROJECT_NAME}"

    - name: Coverity, upload results as artifact
      uses: actions/upload-artifact@v2
      with:
        name: coverity-build
        path: cov-int
