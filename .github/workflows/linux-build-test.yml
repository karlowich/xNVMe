name: linux-build-test

on:
  pull_request:
  push:
    branches:
      - master
      - dev
      - build_test
    tags:
      - v*

defaults:
  run:
    shell: bash

jobs:
  #
  # Produce a "full" source-archive, that is, including source from submodules
  #
  # This is done to provide the source-archive for users in environments without
  # submodule access and for the containers in the workflow which does not have
  # a recent enough version of git do pull down the modules
  #
  source-archive-gen:
    runs-on: ubuntu-latest

    steps:
    - name: Grab source
      uses: actions/checkout@v2

    - name: Prepare Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Generate Full Source Archive
      run: |
        sudo ./scripts/pkgs/ubuntu-focal.sh
        make clobber gen-src-archive

    - name: Upload source archive
      uses: actions/upload-artifact@v2
      with:
        name: archive-src
        path: builddir/meson-dist/*.tar.gz

  # Build the source-archive on multiple Linux distributions
  linux-build:
    runs-on: ubuntu-latest
    needs: source-archive-gen

    strategy:
      matrix:
        container:
        #- { os: 'alpine', ver: 'latest' }
        - { os: 'gentoo/stage3', ver: 'latest' }
        - { os: 'archlinux', ver: 'latest' }
        - { os: 'centos', ver: 'centos7' }
        - { os: 'debian', ver: 'bullseye' }
        - { os: 'debian', ver: 'buster' }
        - { os: 'debian', ver: 'stretch' }
        - { os: 'ubuntu', ver: 'bionic' }
        - { os: 'ubuntu', ver: 'focal' }

    container:
      image: ${{ matrix.container.os }}:${{ matrix.container.ver }}

    steps:
    - name: Container-prep, get the full-source-archive
      uses: actions/download-artifact@v2
      with:
        name: archive-src

    - name: Unpack the full-source-archive
      run: |
        tar xzf xnvme*.tar.gz --strip 1
        rm xnvme*.tar.gz

    - name: Install build-requirements
      run: |
        [[ ${{ matrix.container.os }} == *"gentoo"* ]] && emerge-webrsync || true
        [[ ${{ matrix.container.os }} == *"gentoo"* ]] && source scripts/pkgs/gentoo-${{ matrix.container.ver }}.sh || true
        [[ ${{ matrix.container.os }} != *"gentoo"* ]] && source scripts/pkgs/${{ matrix.container.os }}-${{ matrix.container.ver }}.sh || true
        [[ ! -f "/usr/bin/python" ]] && ln -s /usr/bin/python3.8 /usr/bin/python || true

    - name: Configure, the build
      run: |
        [[ -f "/opt/rh/devtoolset-8/enable" ]] && source /opt/rh/devtoolset-8/enable || true
        [[ ${{ matrix.container.os }} == *gentoo** ]] && LDFLAGS="-ltinfo -lncurses" make config || true
        [[ ${{ matrix.container.os }} != *gentoo** ]] && make config || true

    - name: Dump, the compile-commands and machine
      run: |
        [[ -f "/opt/rh/devtoolset-8/enable" ]] && source /opt/rh/devtoolset-8/enable || true
        cat /proc/cpuinfo
        cat builddir/compile_commands.json || true

    - name: Build!
      run: |
        [[ -f "/opt/rh/devtoolset-8/enable" ]] && source /opt/rh/devtoolset-8/enable || true
        [[ ${{ matrix.container.os }} == *gentoo** ]] && LDFLAGS="-ltinfo -lncurses" make || true
        [[ ${{ matrix.container.os }} != *gentoo** ]] && make || true

    - name: Install
      run: |
        [[ -f "/opt/rh/devtoolset-8/enable" ]] && source /opt/rh/devtoolset-8/enable || true
        cd xnvme
        make install

    - name: Execute 'xnvme enum'
      run: xnvme enum

    - name: Execute 'xnvme library-info'
      run: xnvme library-info
